
import os
import yaml
import logging
from logging.handlers import TimedRotatingFileHandler
from typing import Optional, Dict
from datetime import datetime
import webbrowser
import tkinter as tk
from tkinter import filedialog, messagebox
import pandas as pd
from openpyxl import load_workbook
from openpyxl.worksheet.worksheet import Worksheet
from openpyxl.cell import Cell
from openpyxl.styles import Alignment, PatternFill

def load_config() -> dict:
    """設定ファイル (config.yaml) を読み込み、プレースホルダ{{USER_DOWNLOADS}}をユーザーのダウンロードフォルダーのパスに置換する関数"""
    try:
        with open('config.yaml', 'r', encoding='utf-8') as config_file:
            config = yaml.safe_load(config_file)
        
        downloads_path = os.path.join(os.path.expanduser("~"), 'Downloads')
        
        if 'paths' in config and 'downloads' in config['paths']:
            config['paths']['downloads'] = config['paths']['downloads'].replace('{{USER_DOWNLOADS}}', downloads_path)
        
        if 'files' in config and 'temp_file' in config['files']:
            config['files']['temp_file'] = config['files']['temp_file'].replace('{{USER_DOWNLOADS}}', downloads_path)
        else:
            logging.warning(config['gui']['messages']['config_key_missing'])
            messagebox.showwarning("警告", config['gui']['messages']['config_key_missing'])
        return config

    except FileNotFoundError:
        error_msg = "設定ファイル (config.yaml) が見つかりません。"
        logging.error(error_msg)
        messagebox.showerror("エラー", error_msg)
        raise
    except yaml.YAMLError as e:
        error_msg = f"設定ファイルの解析中にエラーが発生しました: {e}"
        logging.error(error_msg)
        messagebox.showerror("エラー", error_msg)
        raise
    except Exception as e:
        error_msg = f"設定ファイルの読み込み中に予期せぬエラーが発生しました: {e}"
        logging.error(error_msg)
        messagebox.showerror("エラー", error_msg)
        raise

def setup_logging(config: dict) -> None:
    """ロギングの設定を行う関数"""
    log_config = config.get('logging', {})

    LOG_FILE = os.path.join(os.path.dirname(__file__), log_config['file'])
    LOG_LEVEL = getattr(logging, log_config['level'])
    LOG_FORMAT = log_config['format']
    LOG_ENCODING = log_config['encoding']

    rotation_config = log_config.get('rotation', {})
    handler = TimedRotatingFileHandler(
        filename=LOG_FILE,
        when=rotation_config['when'],
        interval=rotation_config['interval'],
        backupCount=rotation_config['backupCount'],
        encoding=LOG_ENCODING
    )

    formatter = logging.Formatter(LOG_FORMAT)
    handler.setFormatter(formatter)

    logger = logging.getLogger()
    logger.setLevel(LOG_LEVEL)
    logger.addHandler(handler)

config = load_config()
setup_logging(config)

def preprocess_dataframe(df: pd.DataFrame) -> pd.DataFrame:
    """
    データフレームを前処理する関数
    摘要の列順を変更し、日時の列を結合。
    """
    df = df.copy()
    columns = df.columns.tolist()
    columns.insert(10, columns.pop(7))
    df = df[columns]

    df['日付'] = pd.to_datetime(
        df['操作日(年)'].astype(str) + '/' +
        df['操作日(月)'].astype(str).str.zfill(2) + '/' +
        df['操作日(日)'].astype(str).str.zfill(2) + ' ' +
        df['操作時刻(時)'].astype(str).str.zfill(2) + ':' +
        df['操作時刻(分)'].astype(str).str.zfill(2) + ':' +
        df['操作時刻(秒)'].astype(str).str.zfill(2)
    )

    return df[['日付', '取引順番号', 'お支払金額', 'お預り金額', '残高', '摘要', 'メモ']]

def process_csv_file(csv_file_path: str, temp_file_path: str) -> Optional[pd.DataFrame]:
    """CSVファイルを読み込み、処理し、Excelファイルとして出力する関数"""
    try:
        df = pd.read_csv(csv_file_path, encoding='shift-jis')
        logging.info(f"CSVファイルを読み込みました: {csv_file_path}")

        output_df = preprocess_dataframe(df)

        output_df.to_excel(temp_file_path, index=False, header=True)
        logging.info(f"CSVデータをExcelファイルに出力しました: {temp_file_path}")

    except pd.errors.EmptyDataError:
        logging.error(config['gui']['messages']['csv_empty_error'].format(csv_file_path))
        messagebox.showerror("エラー", config['gui']['messages']['csv_empty_error'].format(csv_file_path))
    except pd.errors.ParserError:
        logging.error(config['gui']['messages']['csv_parse_error'].format(csv_file_path))
        messagebox.showerror("エラー", config['gui']['messages']['csv_parse_error'].format(csv_file_path))
    except PermissionError:
        logging.error(config['gui']['messages']['permission_error'].format(csv_file_path, temp_file_path))
        messagebox.showerror("エラー", config['gui']['messages']['permission_error'].format(csv_file_path, temp_file_path))
    except Exception as e:
        logging.error(config['gui']['messages']['unexpected_error'].format(e))
        messagebox.showerror("エラー", config['gui']['messages']['unexpected_error'].format(e))
        return None
    
    return output_df

def format_excel_sheet(ws: Worksheet) -> None:
    """Excelワークシートをフォーマットする関数"""
    ws.insert_cols(7)
    ws['G1'] = '明細番号'

    for cell in ws[1]:
        cell.style = 'Normal'
        cell.alignment = Alignment(horizontal='center')

    for col in ['A', 'C', 'D', 'E']:
        for cell in ws[col]:
            if col == 'A':
                cell.number_format = config['excel']['date_format']
            else:
                cell.number_format = config['excel']['number_format']

    for col, width in config['excel']['column_widths'].items():
        ws.column_dimensions[col].width = width

    ws.freeze_panes = 'A2'

def process_vdebit_transaction(ws: Worksheet, cell: Cell, data: str) -> None:
    """Vデビット取引を処理する関数"""
    # match python 3.10 以降
    ws.cell(row=cell.row, column=7).value = data[-8:]
    h_value = data[6:len(data)-9]
    match h_value: 
        case "GIGAZO" | "ｷﾞｶﾞｿﾞｳｱﾌﾟﾘ":
            h_value = "ギガぞうWi-Fi"
        case _ if h_value.startswith("MSFT") or h_value == "ﾏｲｸﾛｿﾌﾄ":
            h_value = "Microsoft 365"
    ws.cell(row=cell.row, column=8).value = h_value
    ws.cell(row=cell.row, column=6).value = 'Visaデビット'

def process_transaction_cell(ws: Worksheet, cell: Cell, data: str, previous_month: int) -> None:
    """各取引のセルを処理する関数"""
    match data:
        case "ＰＡＹＰＡＹ" | "ＡＴＭ手数料" | "振込手数料" as transaction:
            ws.cell(row=cell.row, column=8).value = config['transaction_rules'][transaction]
        
        case transaction if any(key in transaction for key in ["ATM出金", "ATM入金", "利息", "給与振込"]):
            for key in ["ATM出金", "ATM入金", "利息", "給与振込"]:
                if key in transaction:
                    ws.cell(row=cell.row, column=8).value = config['transaction_rules'][key]
                    break
        
        case transaction if transaction.startswith('ＡＰ（'):
            ws.cell(row=cell.row, column=8).value = config['transaction_rules']['ＡＰ（'].format(previous_month)
        
        case transaction if transaction.startswith('Vデビット'):
            process_vdebit_transaction(ws, cell, data)
        
        case _:
            pass

def process_transaction_data(ws: Worksheet) -> int:
    """
    取引データを処理する関数
    各行に対して取引処理を呼び出し、空白のメモを黄色で塗りつぶす。
    黄色に塗りつぶされたセルの数を返す。
    """
    yellow_fill = PatternFill(start_color=config['excel']['highlight_color'], end_color=config['excel']['highlight_color'], fill_type='solid')
    yellow_cell_count = 0

    first_transaction_date = ws['A2'].value
    if first_transaction_date:
        previous_month = (first_transaction_date.month - 1) % 12 or 12

    for row in ws.iter_rows(min_row=2, min_col=6, max_col=6):
        for cell in row:
            process_transaction_cell(ws, cell, cell.value, previous_month)

    for cell in ws['H']:
        if cell.value is None or cell.value == '':
            cell.fill = yellow_fill
            yellow_cell_count += 1

    return yellow_cell_count

def handle_csv(root: tk.Tk) -> None:
    """CSVファイルを処理する関数"""
    temp_file_path = config['files']['temp_file']
    initialdir = os.path.dirname(temp_file_path)
    
    csv_file_path = filedialog.askopenfilename(
        initialdir=initialdir,
        title="CSVファイルを選択",
        filetypes=[("CSV files", "*.csv")]
    )
    
    if csv_file_path:
        output_df = process_csv_file(csv_file_path, temp_file_path)

        if output_df is not None:
            if not os.path.exists(temp_file_path):
                logging.error(config['gui']['messages']['excel_not_generated'].format(temp_file_path))
                messagebox.showerror("エラー", config['gui']['messages']['excel_not_generated'].format(temp_file_path))
                return
            
            try:
                wb = load_workbook(temp_file_path)
                ws = wb.active
                format_excel_sheet(ws)
                yellow_cell_count = process_transaction_data(ws)
                
                wb.save(temp_file_path)
                logging.info(f"Excelファイルを保存しました: {temp_file_path}")
                
                full_width = str(yellow_cell_count).translate(str.maketrans('0123456789', '０１２３４５６７８９'))
                messagebox.showinfo("処理完了", config['gui']['messages']['process_complete'].format(full_width))
                
            except FileNotFoundError:
                logging.error(config['gui']['messages']['excel_not_found'].format(temp_file_path))
                messagebox.showerror("エラー", config['gui']['messages']['excel_not_found'].format(temp_file_path))
            except PermissionError:
                logging.error(config['gui']['messages']['excel_permission_error'].format(temp_file_path))
                messagebox.showerror("エラー", config['gui']['messages']['excel_permission_error'].format(temp_file_path))
            except Exception as e:
                logging.error(config['gui']['messages']['excel_process_error'].format(e))
                messagebox.showerror("エラー", config['gui']['messages']['excel_process_error'].format(e))

    else:
        messagebox.showinfo("キャンセル", config['gui']['messages']['csv_selection_cancel'])

    if root:
        root.update()

def open_loginpage(url: str) -> None:
    """ウェブブラウザーでログインページを開く関数"""
    try:
        webbrowser.open(url)
        logging.info(f"ブラウザでURLを開きました: {url}")
    except Exception as e:
        logging.error(f"ブラウザでURLを開く際にエラーが発生しました: {e}")

def confirm_csv_download_and_start(root: tk.Tk) -> None:
    """CSVファイルのダウンロード・処理の開始を確認し、処理を開始する関数"""
    if messagebox.askyesno("確認", config['gui']['messages']['process_confirm']):
        handle_csv(root)
    else:
        root.after(config['timings']['recheck_interval'], lambda: confirm_csv_download_and_start(root))

def main() -> None:
    """メイン関数"""
    root = tk.Tk()
    root.withdraw()

    if messagebox.askokcancel("ダウンロード", config['gui']['messages']['download_prompt']): 
        root.after(config['timings']['browser_open_delay'], lambda: open_loginpage(config['urls']['login']))
        root.after(config['timings']['download_check_delay'], lambda: confirm_csv_download_and_start(root))
    else:
        response = messagebox.askyesno("確認", config['gui']['messages']['download_cancel_confirm'])
        if response:
            handle_csv(root)
        else:
            root.destroy()

    root.mainloop()

if __name__ == "__main__":
    main()
